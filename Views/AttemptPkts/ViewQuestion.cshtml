 @model IEnumerable<Pkt.Models.Entites.ManageQuestion>
 
@{
    ViewData["Title"] = "Welcome To Quiz";
}

<style>
	input {
		padding: 10px;
		width: 100%;
		font-size: 17px;
		font-family: Raleway;
		border: 1px solid #aaaaaa;
	}

		/* Mark input boxes that gets an error on validation: */
		input.invalid {
			background-color: #ffdddd;
		}

	/* Hide all steps by default: */
	.tab {
		display: none;
	}

	button {
		background-color: #04AA6D;
		color: #ffffff;
		border: none;
		padding: 10px 20px;
		font-size: 17px;
		font-family: Raleway;
		cursor: pointer;
	}

		button:hover {
			opacity: 0.8;
		}

	#prevBtn {
		background-color: #bbbbbb;
	}

	/* Make circles that indicate the steps of the form: */
	.step {
		height: 23px;
		width: 23px;
		margin: 0 2px;
		background-color: #bbbbbb;
		border: none;
		border-radius: 50%;
		display: inline-block;
		opacity: 0.5;
	}

		.step.active {
			opacity: 1;
		}

		/* Mark the steps that are finished and valid: */
		.step.finish {
			background-color: #04AA6D;
		}
</style>

<div class="alert alert-info" id="Information">
	<strong>
		PKT Name : <span class="badge badge-success">@Context.Session.GetString("PKTName")</span>  &nbsp;
		|  Time : <span id="timer" class="badge badge-danger">@Context.Session.GetString("Duration")</span>&nbsp;
		|  Total Question : <span id="NoOfQue" class="badge badge-primary">0</span>&nbsp;
		|  Attempt Question : <blink><span id="AttemptQue" class="badge badge-warning">0</span></blink>&nbsp;
	</strong>
</div>



<script>
	function disableF5(e) { if ((e.which || e.keyCode) == 116 || (e.which || e.keyCode) == 82) e.preventDefault(); };
	$(function () {

		$("*").on("contextmenu", function () {
			return false;
		});

		$(document).on("keydown", disableF5);

	});
	function to_steop(stp, elm) {
		$("#form-wizard").formwizard("show", stp);
		if ($(elm).css("background-color") != 'green' && $(elm).css("background-color") != 'rgb(0, 128, 0)') {
			$(elm).css({ "background-color": "red", "color": "white" });
		}
	}
</script>

<div class="row">
	<div class="col-md-12">
		<div class="card card-default">
			<div class="card-header">
	@* 			<h3 class="card-title">bs-stepper</h3> *@
			</div>
			<div class="card-body p-0">
				<div class="bs-stepper linear">
				<div class="col-md-12">
					<form id="regForm" asp-action="ManageAnswer" method="post">
						

						<div style="text-align:center;margin-top:40px;">
							@{
								var count = 1;
							}
							@foreach (var item in Model)
							{
								<span class="step">@count</span>
								count++;
							}
						</div>


							@{
								count = --count;
								var ques = 1;
								var index = 0;
							}

						@foreach (var item in Model)
						{
							<input type="hidden" name="QueCount" id="QueCount" value="@count">
								<input type="hidden" name="[@index].EmployeeName" id="EmpName" value="@Context.Session.GetString("empName")">
								<input type="hidden" name="[@index].EmployeeId" id="EmpId" value="@Context.Session.GetString("empID")">
								<input type="hidden" name="[@index].PKTName" id="PKTName" value="@Context.Session.GetString("PKTName")">
								<input type="hidden" name="[@index].Cm_Id" value="@Context.Session.GetString("CMID")" />
							<input type="hidden" id="Duration" value="@Context.Session.GetString("Duration")">
								<input type="hidden" name="[@index].QuestionId" value="@item.Id" />
							<div class="tab">
								<b style="navy">Question:@ques.&nbsp;</b><b style="color: #337ab7;">@item.Question</b>
                                <div class="control-group" style="padding-left: 5rem!important">
									<div class="span2">
											<input type="radio" name="[@index].AnsOption" value="1">
										<b style="color: #337ab7;">@item.Option1</b>
									</div>
								</div>

								<div class="control-group" style="padding-left: 5rem!important">
									<div class="span2">
											<input type="radio" name="[@index].AnsOption" value="2">
										<b style="color: #337ab7;">@item.Option2</b>
									</div>
								</div>

								<div class="control-group" style="padding-left: 5rem!important">
									<div class="span2">
											<input type="radio" name="[@index].AnsOption" value="3">
										<b style="color: #337ab7;">@item.Option3</b>
									</div>
								</div>

								<div class="control-group" style="padding-left: 5rem!important">
									<div class="span2">
											<input type="radio" name="[@index].AnsOption" value="4">
										<b style="color: #337ab7;">@item.Option4</b>
									</div>
								</div>
								</div>
								ques++;
								index++;
							}


						<div style="overflow:auto;">
							<div style="float:right;">
								<button type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
								<button type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
							</div>
						</div>

					</form>

					
				</div>
			</div>
			<!-- /.card-body -->
			<div class="card-footer">
				
			</div>
		</div>
		<!-- /.card -->
	</div>
</div>
</div>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
	

	<script>
     	
        var totalQue = $('#QueCount').val();
		$('#NoOfQue').html(totalQue);
		$('#AttemptQue').html(0);
		var currentTab = 0; // Current tab is set to be the first tab (0)
		showTab(currentTab); // Display the current tab

		function showTab(n) {
			// This function will display the specified tab of the form...
			var x = document.getElementsByClassName("tab");
			x[n].style.display = "block";
			//... and fix the Previous/Next buttons:
			if (n == 0) {
				document.getElementById("prevBtn").style.display = "none";
			} else {
				document.getElementById("prevBtn").style.display = "inline";
			}
			if (n == (x.length - 1)) {
				document.getElementById("nextBtn").innerHTML = "Submit";
			} else {
				document.getElementById("nextBtn").innerHTML = "Next";
			}
			//... and run a function that will display the correct step indicator:
			fixStepIndicator(n)
		}

		function nextPrev(n) {
			// This function will figure out which tab to display
			var x = document.getElementsByClassName("tab");
			// Exit the function if any field in the current tab is invalid:
			if (n == 1 && !validateForm()) return false;
			// Hide the current tab:
			x[currentTab].style.display = "none";
			// Increase or decrease the current tab by 1:
			currentTab = currentTab + n;
			// if you have reached the end of the form...
			if (currentTab >= x.length) {
				// ... the form gets submitted:
				document.getElementById("regForm").submit();
				return false;
			}
			// Otherwise, display the correct tab:
			showTab(currentTab);
		}

		function validateForm() {
			// This function deals with validation of the form fields
			var x, y, i, valid = true;
			x = document.getElementsByClassName("tab");
			y = x[currentTab].querySelectorAll("input[type='radio']");

			// A loop that checks every radio button in the current tab:
			var radioGroupNames = [];
			for (i = 0; i < y.length; i++) {
				var radioName = y[i].name;
				if (radioGroupNames.indexOf(radioName) === -1) {
					radioGroupNames.push(radioName);
					var radiosInGroup = document.querySelectorAll("input[type='radio'][name='" + radioName + "']");
					var checked = Array.from(radiosInGroup).some(function (radio) {
						return radio.checked;
					});
					if (!checked) {
						// add an "invalid" class to the radio button's parent element:
						radiosInGroup.forEach(function (radio) {
							radio.parentNode.classList.add("invalid");
						});
						// and set the current valid status to false
						valid = false;
					} else {
						// If the radio button is checked, remove any previously added "invalid" class:
						radiosInGroup.forEach(function (radio) {
							radio.parentNode.classList.remove("invalid");
						});
					}
				}
			}

			// If the valid status is true, mark the step as finished and valid:
			if (valid) {
				document.getElementsByClassName("step")[currentTab].classList.add("finish");
			} else {
				// Display alert if validation fails
				alert("Please select an option for all questions.");
			}
			return valid; // return the valid status
		}

		function fixStepIndicator(n) {
			// This function removes the "active" class of all steps...
			var i, x = document.getElementsByClassName("step");
			for (i = 0; i < x.length; i++) {
				x[i].className = x[i].className.replace(" active", "");
			}
			//... and adds the "active" class on the current step:
			x[n].className += " active";
		}
	</script>
	<script>
        	$(function () {
				var min = parseInt($('#Duration').val()); // Parse the value to an integer
				var c = 60 * min;
				var t;

				function timedCount() {
					var hours = parseInt(c / 3600) % 24;
					var minutes = parseInt(c / 60) % 60;
					var seconds = c % 60;
					var result = (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds);
					$('#timer').html(result);

					if (c == 0) {
						$("#regForm").submit();
					} else {
						c = c - 1;
						t = setTimeout(timedCount, 1000);
					}
				}



				const examDuration = min * 60 * 1000; // 5 minutes

				// Get the form element
				const examForm = document.getElementById("regForm");
                function submitForm() {
					examForm.submit();
				}

				
				const countdown = setTimeout(submitForm, examDuration);
				const timerInterval = setInterval(function () {
					const timeLeft = Math.ceil((countdown - Date.now()) / 1000);
						if (timeLeft >= 0) {
							// Update a timer display if needed
							// Example: document.getElementById("timerDisplay").textContent = timeLeft + " seconds left";
						} else {
							// Time's up, submit the form
							submitForm();
							clearInterval(timerInterval); // Stop the timer
						}
					}, examDuration);


				timedCount(); // Start the timer initially
           });
	
		$("input[type='radio']").on("click", function () {
			var numberCheckedRadio = $('input:radio:checked').length;
			$('#AttemptQue').html(numberCheckedRadio);
			if (numberCheckedRadio > 0) {
				$("#form-wizard").data('isRadioChecked', true);
			} else {
				$("#form-wizard").data('isRadioChecked', false);
			}
		});


	</script>

	<script>
		$(function () {
				$('#regForm').on('submit',function (e) {
				
				e.prevent.Default();
					
				// Initialize an array to store option IDs
				var optionIds = [];

				// Get the question ID
				var questionId = $("#txt_qid").val();

				// Loop through each radio button to get the selected option IDs
				$(".option:checked").each(function () {
					optionIds.push($(this).val());
				});

				// Check if 5 options have been selected
				if (optionIds.length != 5) {
					alert("Please select 5 options");
					return;
				}

				// Create the data object to send to the controller
				var dataToSend = {
					questionId: questionId,
					optionIds: optionIds
				};

				// Make AJAX POST request
				$.ajax({
					url: '/ControllerName/ActionName',
					type: 'POST',
					data: JSON.stringify(dataToSend),
					contentType: 'application/json',
					success: function (response) {
						// Handle success response
					},
					error: function (xhr, status, error) {
						// Handle error
					}
				});
			});
		});
	</script>
	<script>
		function disableF5(e) { if ((e.which || e.keyCode) == 116 || (e.which || e.keyCode) == 82) e.preventDefault(); };
			$(function () {
				$("*").on("contextmenu", function () {
					return false;
				});
				$(document).on("keydown", disableF5);

			});
			function to_steop(stp, elm) {
				$("#form-wizard").formwizard("show", stp);
				if ($(elm).css("background-color") != 'green' && $(elm).css("background-color") != 'rgb(0, 128, 0)') {
					$(elm).css({ "background-color": "red", "color": "white" });
				}
			}
	</script>
}

@*
   <style>
	.form-horizontal .controls {
	    margin-left: 0px !important;
	    padding: 0px !important;
	}
	label{
		margin-left: 0px !important;
	}
	blink {
	-webkit-animation: blink 1s step-end infinite;
	animation: blink 1s step-end infinite
	}
	-webkit-keyframes blink 
	{
	75% { opacity: 0 }
	}
	keyframes blink 
	{
	75% { opacity: 0 }
	}

</style>


 <div class="alert alert-info" id="Information">
        <strong>PKT Name : <span class="badge badge-success">@Context.Session.GetString("PKTName")</span>  &nbsp;
        |  Time : <span id="timer" class="badge badge-danger">@Context.Session.GetString("Duration")</span>&nbsp;
		|  Total Question : <span id="NoOfQue" class="badge badge-primary">0</span>&nbsp;
        |  Attempt Question : <blink><span id="AttemptQue" class="badge badge-warning">0</span></blink>&nbsp;
        </strong>
    </div>

<div class="row-fluid">
	<div class="span12">
		<div class="widget-box">
			<div class="widget-content nopadding">
              <form id="form-wizard" asp-action="ManageAnswer" class="form-horizontal" method="post">
                     <div class="row-fluid " style="margin: 0px;margin-bottom: 20px;">
						<div style="border: 1px solid #bdb9b9;padding: 8px;border-radius:0px;box-shadow: 0px 0px 2px 1px white inset,0px 0px 2px 1px white inset,0px 0px 1px 1px #120e0e inset,0px 0px 2px 1px #fff inset;">
							@{
								var count = 1;
							}
							@foreach (var item in Model)
							{
								<span class="btn btn-default" style="width: 11px;margin: 0px 0px 1px 0px;padding: 2px 8px 2px 6px;border-radius: 2px;background-color: #f8820f;color: #fff;border: 1px solid #2008084d;font-weight: bold;text-shadow: 0 1px 1px rgba(23, 21, 21, 0.8);" onclick="to_steop(\'form-wizard-@count'\',this);" dset="form-wizard-@count">@count</span>
								count++;
							}
                         </div>
					</div>
					@{
						count = --count;
						var ques = 1;
					}
					
					@foreach (var item in Model)
					{

						<div id="form-wizard-@ques" class="step">
                            <div class="control-group">
								<div class="control-group">
									<div class="span2">
										<b style="navy">Question:@ques</b><b style="color: #337ab7;">@item.Question</b>
										<input type="hidden" name="QueCount" id="QueCount" value="@count">
										<input type="hidden" name="txt_qid" value="@item.Id" />
										<input type="hidden" name="EmpName" id="EmpName" value="@Context.Session.GetString("empName")">
										<input type="hidden" name="EmpId" id="EmpId" value="@Context.Session.GetString("empID")">
										<input type="hidden" name="PKTName" id="PKTName" value="@Context.Session.GetString("PKTName")">
										<input type="hidden" id="Duration" value="@Context.Session.GetString("Duration")">
								 	</div>
								</div>

								<div class="control-group" style="padding-left: 5rem!important">
									<div class="span2">
										<input type="radio" name="opt_qid_@item.Id" value="1">
										<b style="color: #337ab7;">@item.Option1</b>
									</div>
								</div>

								<div class="control-group" style="padding-left: 5rem!important">
									<div class="span2">
										<input type="radio" name="opt_qid_@item.Id" value="2">
										<b style="color: #337ab7;">@item.Option2</b>
									</div>
								</div>

								<div class="control-group" style="padding-left: 5rem!important">
									<div class="span2">
										<input type="radio" name="opt_qid_@item.Id" value="3">
										<b style="color: #337ab7;">@item.Option3</b>
									</div>
								</div>

								<div class="control-group" style="padding-left: 5rem!important">
									<div class="span2">
										<input type="radio" name="opt_qid_@item.Id" value="4">
										<b style="color: #337ab7;">@item.Option4</b>
									</div>
								</div>

							</div>
						</div>
						ques++;
					}
					
					 <div class="form-actions">
						<button id="back" class="btn btn-primary" type="reset">Back</button>
						<button id="next" class="btn btn-primary" type="submit">Next</button>
						<div id="status"></div>
					</div>
					<div id="submitted"></div>
				</form>
			</div>
		</div>
	</div>
</div>
   @section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

	
	
	<script>
		function disableF5(e) { if ((e.which || e.keyCode) == 116 || (e.which || e.keyCode) == 82) e.preventDefault(); };
		$(function () {
			$("*").on("contextmenu", function () {
				return false;
			});
            $(document).on("keydown", disableF5);

		});
		function to_steop(stp, elm) {
			$("#form-wizard").formwizard("show", stp);
			if ($(elm).css("background-color") != 'green' && $(elm).css("background-color") != 'rgb(0, 128, 0)') {
				$(elm).css({ "background-color": "red", "color": "white" });
			}
		}
	</script>
	<script>
		var totalQue = $('#QueCount').val();
        $('#NoOfQue').html(totalQue);
		$('#AttemptQue').html(0);
    	$("input[type='radio']").on("click", function () {
			var numberCheckedRadio = $('input:radio:checked').length;
			$('#AttemptQue').html(numberCheckedRadio);
            if (numberCheckedRadio > 0) {
				$("#form-wizard").data('isRadioChecked', true);
			} else {
				$("#form-wizard").data('isRadioChecked', false);
			}
		});

    	$("#form-wizard").submit(function (e) {
			var isRadioChecked = $(this).data('isRadioChecked');
			if (!isRadioChecked) {
				alert("Please select an answer.");
				e.preventDefault(); 
			} else {
				var isLastStep = $("div.step.ui-formwizard-content:visible").hasClass("submit_step");
				console.log(isLastStep);
				if (isLastStep) {
					var formData = $(this).serialize();
                   	$.ajax({
						type: "POST",
						url: "YourSubmitUrl", 
						data: formData,
						success: function (response) {
							alert("Form submitted successfully!");
						},
						error: function (xhr, status, error) {
							console.error(error);
							alert("Error occurred while submitting the form.");
						}
					});
				} else {
					var Cnfm = confirm("Are You Sure To Submit");
					if (Cnfm) {
						$(this).find(":input:not('.wizard-ignore')").removeAttr("disabled");
						$("#Information").hide();
					} else {
						e.preventDefault();
					}
				}
			}
		});

        $("input").removeAttr("disabled");
        $("#next").on("click", function (e) {
			if ($("div.step.ui-formwizard-content:visible").find(":input:checked").length < 1) {
				alert("Answer should not be empty");
				window.setTimeout(function () {
					$("#form-wizard").formwizard("back");
				}, 20);
			}
		});

		$(":input").on("click", function (e) {
			if ($(this).parents(".ui-formwizard-content").attr('id') !== undefined && $(this).parents(".ui-formwizard-content").attr('id') != 'undefined') {
				var cntmp = $(this).parents(".ui-formwizard-content").attr('id');
				$("span.btn[dset='" + cntmp + "']").css({ "background-color": "green", "color": "white" });
			}
		});
	</script>
 }







 *@